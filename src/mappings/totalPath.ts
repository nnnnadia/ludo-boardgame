const duplicatedPath = [
  [1, 6],
  [1, 7],
  [1, 8],
  [1, 9],
  [1, 10],
  [2, 10],
  [3, 10],
  [4, 10],
  [5, 10],
  [6, 10],
  [6, 11],
  [6, 12],
  [6, 13],
  [6, 14],
  [6, 15],
  [7, 15],
  [8, 15],
  [9, 15],
  [10, 15],
  [10, 14],
  [10, 13],
  [10, 12],
  [10, 11],
  [10, 10],
  [11, 10],
  [12, 10],
  [13, 10],
  [14, 10],
  [15, 10],
  [15, 9],
  [15, 8],
  [15, 7],
  [15, 6],
  [14, 6],
  [13, 6],
  [12, 6],
  [11, 6],
  [10, 6],
  [10, 5],
  [10, 4],
  [10, 3],
  [10, 2],
  [10, 1],
  [9, 1],
  [8, 1],
  [7, 1],
  [6, 1],
  [6, 2],
  [6, 3],
  [6, 4],
  [6, 5],
  [6, 6],
  [5, 6],
  [4, 6],
  [3, 6],
  [2, 6],
  [1, 6],
  [1, 7],
  [1, 8],
  [1, 9],
  [1, 10],
  [2, 10],
  [3, 10],
  [4, 10],
  [5, 10],
  [6, 10],
  [6, 11],
  [6, 12],
  [6, 13],
  [6, 14],
  [6, 15],
  [7, 15],
  [8, 15],
  [9, 15],
  [10, 15],
  [10, 14],
  [10, 13],
  [10, 12],
  [10, 11],
  [10, 10],
  [11, 10],
  [12, 10],
  [13, 10],
  [14, 10],
  [15, 10],
  [15, 9],
  [15, 8],
  [15, 7],
  [15, 6],
  [14, 6],
  [13, 6],
  [12, 6],
  [11, 6],
  [10, 6],
  [10, 5],
  [10, 4],
  [10, 3],
  [10, 2],
  [10, 1],
  [9, 1],
  [8, 1],
  [7, 1],
  [6, 1],
  [6, 2],
  [6, 3],
  [6, 4],
  [6, 5],
  [6, 6],
  [5, 6],
  [4, 6],
  [3, 6],
  [2, 6],
]

const findPath = (coordinates: number[]): number[][] => {
  const startIndex = duplicatedPath.findIndex(
    ([x, y]) => x === coordinates[0] && y === coordinates[1],
  )

  if (startIndex === -1) {
    throw new Error('Starting coordinates not found in path')
  }

  const pathLength = duplicatedPath.length / 2
  return duplicatedPath.slice(startIndex, startIndex + pathLength)
}

export { findPath }
